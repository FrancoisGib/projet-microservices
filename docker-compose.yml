services:
  postgres:
    image: postgres
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}

  rabbitmq:
    image: rabbitmq:3-management
    healthcheck:
      test: rabbitmq-diagnostics -q status && rabbitmq-diagnostics -q check_local_alarms
      interval: 10s
      retries: 10

  api-gateway:
    scale: 2
    environment:
      SERVER_PORT: ${API_GATEWAY_PORT}
    build:
      args:
        SERVICE_NAME: api-gateway
      dockerfile: Dockerfile
    ports:
      - 9000-9010:9000

  project-service:
    build:
      args:
        SERVICE_NAME: project-service
      dockerfile: Dockerfile
    environment:
      MONGO_URL: mongo
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      SERVER_PORT: ${PROJECT_SERVICE_PORT}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
    depends_on:
      mongo:
        condition: service_started

  user-service:
    build:
      args:
        SERVICE_NAME: user-service
      dockerfile: Dockerfile
    environment:
      POSTGRES_URL: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      SERVER_PORT: ${USER_SERVICE_PORT}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
    depends_on:
      postgres:
        condition: service_started

  logs-service:
    build:
      args:
        SERVICE_NAME: logs-service
    environment:
      LOG_PATH: logback.log
      RABBITMQ_HOST: ${RABBITMQ_HOST}
    volumes:
      - ./data/logs:/logs
    depends_on:
      rabbitmq:
        condition: service_healthy